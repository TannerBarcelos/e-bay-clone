{"version":3,"sources":["components/SearchBar.js","components/ItemCard.js","actions/index.js","components/Landing.js","components/CartItemCard.js","reducers/updateCart.js","components/Cart.js","components/Navigation.js","components/App.js","reducers/getSearchQuery.js","reducers/index.js","index.js"],"names":["SearchBar","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","getSearch","state","search","bind","className","onSubmit","this","id","style","width","margin","type","placeholder","aria-label","aria-describedby","currentChar","onChange","onClick","Component","connect","cart","currentCart","addToCart","data","payload","itemData","title","item","price","sellingStatus","currentPrice","__value__","img","galleryURL","ebay_link","viewItemURL","_id","itemId","Math","random","qty","src","alt","href","rel","Landing","valueInputFromSearch","alert","populateItemStore","Fragment","map","index","key","dispatch","a","axios","post","search_","results","body","findItemsByKeywordsResponse","searchResult","mapDispatchToProps","addAnother","subtractAnother","clearItem","items","marginLeft","currentCartTotal","updateCart","action","Number","AddQTY","find","val","SubQTY","Object","assign","filter","itemToClear","Cart","toFixed","cartItems","to","data-count","length","App","path","component","exact","getSearchQuery","itemResults","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.616e01ac.chunk.js","sourcesContent":["//this project is pre-hooks so using class components when necessary or for when we need a lifecycle method\n\nimport React, {Component} from 'react';\n\nclass SearchBar extends Component {\n  constructor (props) {\n    super (props);\n\n    //will keep the input form controlled with stat\n    this.state = {\n      search: '',\n    };\n\n    //bind the event listeners that call the actions: bind will allow us to call functions on objects in another scope as we have learned: we need to\n    //set state and handle changes to the state of things in this component, so, we should always bind out event handling methods to 'this'\n    this.handleChange = this.handleChange.bind (this);\n    this.handleSubmit = this.handleSubmit.bind (this);\n  }\n\n  //controls the input: do not prevent default here\n  handleChange = e => {\n    this.setState ({\n      //we index the object [] instead of writing this.state...\n      //e.target.name will be the target of the element we aliased with a name attribute\n      //so this is a cleaner way of handling events. both in plain JS and in react design\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  //prevent enter from submitting: make them press submit (which will fire an action in landign)\n  handleSubmit = e => {\n    e.preventDefault ();\n    //invoking the callback from landing to get the searchbar input and pass it back [common practice for searchbar components and components that\n    // rely on data from other components but exist further down hierarchy]\n    this.props.getSearch (this.state.search);\n  };\n\n  render () {\n    return (\n      <div className=\"main\">\n        <form className=\"example\" onSubmit={this.handleSubmit}>\n          <div\n            id=\"inp\"\n            className=\"input-group mb-3\"\n            style={{width: '70vw', margin: 'auto'}}\n          >\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              aria-label=\"Recipient's username\"\n              aria-describedby=\"button-addon2\"\n              id=\"searchQuery\"\n              name=\"search\"\n              value={this.state.currentChar}\n              onChange={this.handleChange}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                id=\"button-addon2\"\n                onClick={this.handleSubmit}\n              >\n                Search\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\n//needed for mapping state to props and passing action\nimport {connect} from 'react-redux';\n\n//add to cart action\nimport {addToCart} from '../actions/index';\n\n//displays a card of the item\n\nimport './styles/ItemCard_style.css';\n\nfunction ItemCard (props) {\n  const itemData = {\n    title: props.item.title,\n    price: props.item.sellingStatus[0].currentPrice[0].__value__,\n    img: props.item.galleryURL,\n    ebay_link: props.item.viewItemURL,\n    _id: props.item.itemId + Math.random (),\n    qty: 1,\n  };\n\n  let alias = ' image';\n\n  return (\n    <div className=\"card\" style={{width: '17rem'}}>\n      <img\n        src={itemData.img}\n        alt={itemData.title + alias}\n        className=\"img-thumbnail\"\n      />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{itemData.title}</h5>\n        <a href={itemData.ebay_link} target=\"_blank\" rel=\"noopener noreferrer\">\n          No image? See me on ebay\n        </a>\n        <p>${itemData.price}</p>\n        <div className=\"bottom-btn\">\n          {/*add an onclick event that will invoke an action that will send the item object to be put into the cart state*/}\n          <button\n            href=\"#\"\n            className=\"btn btn-primary\"\n            /*add the item to the cart: using the action creator to do so [action creator uses props as we need connect() to send the action\n            ]*/\n            onClick={() => props.addToCart (itemData)}\n          >\n            Add to cart\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//map the state:\n// currentCart is the name of the key we gave to the addtocart reducer in our combine reducer object in the index.js\nconst mapStateToProps = state => {\n  return {cart: state.currentCart};\n};\n\n//add to cart now can be invoked using props. second param is our dipatch object: implicitely dispatxhes actions\nexport default connect (mapStateToProps, {addToCart}) (ItemCard);\n","/**\n * \n * actions page: create action creators that take in some type of value to invoke action and then\n * we return the action type and the payload\n * \n * the actions are imported to components we want to use them in, and then connect()\n * sends the passed action to the provider which has access to the state: we combine all our reducers in \n * an index file, but separate the code in separate files for design. \n * \n * \n */\n\nimport axios from 'axios';\n\n//this will be asyncronous so we need redux thunk (passed into the create store in root index)!\n// : this performs the request to the express endpoint to produce the ebay api searhc result\nexport const populateItemStore = data => async dispatch => {\n  const results = await axios.post ('/search', {\n    search_: data,\n  });\n\n  //dispatch sends an action to the reducers. This is explicit in syncronous action creators but needs to be explicit\n  // with async\n  dispatch ({\n    type: 'POPULATE_STORE',\n    payload: results.data.body.findItemsByKeywordsResponse[0].searchResult[0]\n      .item,\n  });\n};\n\n//add to cart action creator\nexport const addToCart = data => {\n  return {\n    type: 'ADD_TO_CART',\n    payload: data,\n  };\n};\n\n//to add the same item again in cart: update qty\nexport const addAnother = data => {\n  return {\n    type: 'ADD_ANOTHER',\n    payload: data,\n  };\n};\n\n//to remove 1 off the qty of a multiply qty value\nexport const subtractAnother = data => {\n  return {\n    type: 'SUBTRACT_ANOTHER',\n    payload: data,\n  };\n};\n\n//clears only selected item\nexport const clearItem = data => {\n  return {\n    type: 'CLEAR_ITEM',\n    payload: data,\n  };\n};\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n//component stle\nimport './styles/LandingCard_style.css';\n\n//we need create store and redux-thunk import\nimport SearchBar from './SearchBar';\nimport ItemCard from './ItemCard';\n\n//search action to populate results: actions are named exports so we must destructure: wherever we want to use an action, we import it\n//and then can dispatch the actions as a plaion ob ject in connect, and we can also get access to state using mapStateToProps\nimport {populateItemStore} from '../actions/index';\n\n//no state here: we handle the search results and all in here, and only keep state on the shopping\n//cart and what to do to it\nclass Landing extends Component {\n  //get the input setting the state\n  getSearch = valueInputFromSearch => {\n    if (valueInputFromSearch === '') {\n      return alert ('Please enter a value');\n    }\n    //send the data to the action creator for populating the current search store [one of the many items in state we figured for this app]\n    this.props.populateItemStore (valueInputFromSearch);\n  };\n\n  render () {\n    return (\n      <React.Fragment>\n        {/**sending our callback to the search to return the entered controlled data there up here to send a request to ebay api \n        remember in core js we can call functions from objects by getting the object and putting () after it.. this is how\n        we invoke this callback in the child and pass it data back and seen above in the fucntion\n        how it works.. we just pass the signature as the prop here though. It is a callback , so, we do not call it here. it gets called back later*/}\n        <SearchBar getSearch={this.getSearch} />\n        <div className=\"contain\">\n          {this.props.search.map ((item, index) => {\n            return <ItemCard key={index} item={item} />;\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * We now need to use connect() to map the state of our app to the component. We will be able to pull out the search results\n * and use it here to display\n * pull out the data (the reducer that holds the state for the items searched)\n */\nconst mapStateToProps = state => {\n  return {search: state.data};\n};\n\n//connect(mapstat,mapdispatch[built,plainobject, or passed as destructured object seen below])\nexport default connect (mapStateToProps, {populateItemStore}) (Landing);\n\n//connect always takes these two params! [map and then the action to send to reducers (see diagram of this from course: connect is the middle man that allows every component to connect to global store!)]\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {addAnother, subtractAnother, clearItem} from '../actions/index';\n\nimport './styles/ItemCard_style.css';\n\n//we pass as props from cart.js the item from the cart store here but then use the redux store to update the data\nfunction CartItemCard (props) {\n  return (\n    <div className=\"card\" style={{width: '17rem'}}>\n      <span>Qty: {props.items.qty}</span>\n      <img\n        src={props.items.img}\n        alt={props.items.title + ' alias'}\n        className=\"img-thumbnail\"\n      />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{props.items.title}</h5>\n        <a\n          href={props.items.ebay_link}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          No image? See me on ebay\n        </a>\n        <p>${props.items.price}</p>\n        <div className=\"bottom-btn\">\n          <button\n            href=\"#\"\n            className=\"btn btn-primary\"\n            style={{marginLeft: '3px'}}\n            onClick={() => props.subtractAnother (props.items)}\n          >\n            -\n          </button>\n          <button\n            href=\"#\"\n            className=\"btn btn-primary\"\n            style={{marginLeft: '3px'}}\n            /**pass the item  as the data to the action creator */\n            onClick={() => props.addAnother (props.items)}\n          >\n            +\n          </button>\n          <button\n            href=\"#\"\n            className=\"btn btn-primary\"\n            style={{marginLeft: '3px'}}\n            onClick={() => props.clearItem (props.items)}\n          >\n            clear\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//maps the current shopping cart completely as props to this component: if props were passed from a parent, it will use those, and then\n//update via this function\nconst mapStateToProps = state => {\n  return {\n    cart: state.currentCart,\n  };\n};\n\n//dispatch our actions to props so we can invoke them to make a change to the state (this is why the actions have props. prefixing them)\nconst mapDispatchToProps = {\n  addAnother,\n  subtractAnother,\n  clearItem,\n};\n\nexport default connect (mapStateToProps, mapDispatchToProps) (CartItemCard);\n","/**\n * Remember: the initial state for a reducer is supposed to be defaulted (depending on the type, you use the appropriate default)\n * @param {currentCart} currentCart \n * @param {action} action -> item id\n */\n\nexport let currentCartTotal = 0; //holds the current cart total\n\nconst updateCart = (currentCart = [], action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      //add this price to the cart\n      currentCartTotal += Number (action.payload.price); //cast to number to get appropiate addition and not concatentation\n      return [...currentCart, action.payload];\n\n    case 'ADD_ANOTHER':\n      const AddQTY = currentCart.find (val => val._id === action.payload._id); //find() returns first occurence of some predicate that is found\n      AddQTY.qty += 1;\n      //add thi sprice to the cart\n      currentCartTotal += Number (action.payload.price);\n      return [...currentCart];\n\n    case 'SUBTRACT_ANOTHER':\n      //same logic as add! only thing we do is subtract the qty\n      const SubQTY = currentCart.find (val => val._id === action.payload._id);\n\n      //if the qty is at 1 and the user is trying to remove it, we do not want to show 0 qty of an item in a cart so we can remove it\n      //by using filter and assign\n      if (SubQTY.qty === 1) {\n        //the item is cleared, but the price wont be! so need to subtract that price as well as subtracting in the else in the case we decremented qty and we did not end up at 0 products\n        currentCartTotal -= Number (action.payload.price);\n        return Object.assign (\n          [],\n          currentCart.filter (val => val._id !== action.payload._id)\n        );\n      } else {\n        currentCartTotal -= Number (action.payload.price);\n        SubQTY.qty -= 1;\n      }\n      return [...currentCart];\n\n    case 'CLEAR_ITEM':\n      //find the item to delete: use the items id as the search query\n      const itemToClear = currentCart.find (\n        val => val._id === action.payload._id\n      );\n      //if we clear with +1 items, the subtraction will be off, so, subtract qty amunt of dollars * the price to get the cart correct\n      currentCartTotal -= action.payload.price * action.payload.qty;\n      return Object.assign (\n        [],\n        currentCart.filter (item => item._id !== itemToClear._id)\n      );\n\n    default:\n      return currentCart;\n  }\n};\n\nexport default updateCart;\n\n/**\n * We usually put reducers unrelated (but affect overall certain states) in separate reducer! Hwoever, since +,-,add and clear all deal with the \n * shopping carts state, it is required to use a switch and do all 4 operations here\n */\n\n/**\n  * Here is a clean way of reassigning new state without 'mutating' the old state: uses object.assing() which allows us to make a new object and assign \n  * it data from a function to return data to it:  obnject.assign is used a lot !!! study it\n  * \n  * \n  *   const products = (state, action) => {\n  switch(action.type){\n    case 'PURCHASE':\n      const ids = action.cart.map(item => item.id);\n      return Object.assign([], state.map(item => {\n        if(ids.includes(item.id)){\n          item.inventory -= action.cart.filter(p => p.id === item.id)[0].quantity;\n        }\n        return item;\n      }));\n    case default:\n      return state;\n    }\n  };\n  * \n  */\n","import React, {Component} from 'react';\n\nimport {connect} from 'react-redux';\n\nimport CartItemCard from './CartItemCard'; //to render cards from our current cart\n\n//styles\nimport './styles/cartItems.css';\n\nimport {currentCartTotal} from '../reducers/updateCart';\n\nclass Cart extends Component {\n  render () {\n    return (\n      <div className=\"cartItemsDiv\">\n        <h3>Current Cart</h3>\n        <p>total: ${currentCartTotal.toFixed (2)}</p>\n        {/*get total function inserted here*/}\n        <div className=\"card-container\">\n          {this.props.cartItems.map ((item, index) => {\n            return <CartItemCard key={index} items={item} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\n//getting the currentCart state from our combined reducer\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.currentCart,\n  };\n};\n\nexport default connect (mapStateToProps, null) (Cart);\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nimport '../App.css';\nimport {connect} from 'react-redux';\n\n//navigation component: builds out the linkage for the routes within the react app (will be mounted at the top level app)\nconst Navigation = props => {\n  return (\n    <header>\n      <nav>\n        {/* will be using routing tool NavLink*/}\n        <ul className=\"ul-nav-container\">\n          <li>\n            <NavLink to=\"/\" id=\"links\">fakebay</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/cart\" id=\"float-right-links\">\n              <i\n                className=\"fas fa-shopping-cart\"\n                data-count={props.cart.length}\n              />\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\n//we will render the current cart length in the icon for data-count in the icon\nconst mapStateToProps = state => {\n  return {cart: state.currentCart};\n};\n\nexport default connect (mapStateToProps) (Navigation);\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from 'react-router-dom'; //for our nav\nimport '../App.css';\n\n//pages (components) [landing, cart, checkout] and raising up the state from a searchbar local state {thats in the landing component}\nimport Landing from './Landing';\nimport Cart from './Cart';\nimport Navigation from './Navigation';\n\nfunction App() {\n  return ( <\n    div className = \"App\" > {\n      /*SETUP APP ROUTES*/ } <\n    BrowserRouter > {\n      /**good practice is to mount the navbar right below browser router, and it will be sent to all components:\n              will save time in importing and mounting everywhere */\n    } <\n    Navigation / >\n    <\n    Switch >\n    <\n    Route path = \"/\"\n    component = {\n      Landing\n    }\n    exact / >\n    <\n    Route path = \"/cart\"\n    component = {\n      Cart\n    }\n    exact / >\n    <\n    /Switch> <\n    /BrowserRouter> <\n    /div>\n  );\n}\n\nexport default App;","//check the action type and create store: remember that actions are automatically passed to all reducers with the dispatch\n\nconst getSearchQuery = (itemResults = [], action) => {\n  //repopulate the curent state with the spread operator\n  if (action.type === 'POPULATE_STORE') {\n    return [...action.payload];\n  }\n  //not action we wanted: return default state\n  return itemResults;\n};\n\nexport default getSearchQuery;\n","import {combineReducers} from 'redux';\n\n//reducers\nimport getSearchQuery from './getSearchQuery';\nimport updateCart from './updateCart';\n\nexport default combineReducers ({\n  data: getSearchQuery,\n  currentCart: updateCart,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport thunk from 'redux-thunk'; //needed since we are using async request for our axios request to our backend to get ebay data\n\n//react/redux stuff\nimport {\n  Provider\n} from 'react-redux'; //needed to PROVIDE redux store to every compomnent\nimport {\n  createStore,\n  applyMiddleware\n} from 'redux'; //used to create our global state (store) which takes in all our reducers (which is our state/affecting state!)\n\n//importing all our COMBINED reducers so we can create our store\nimport reducers from './reducers';\n\n//common practice: create store above the render, and pass it as a prop to our provider [we need to pass apply middleware with thunk ALWAYS if our app has an action creator thats async]\nconst store = createStore(reducers, applyMiddleware(thunk));\n\n//render the app wrapped in the provider that we need to send global state to all our components in the sub path of this project\n//and\nReactDOM.render(\n  //pass the redux store as a prop to the provider\n  <\n  Provider store = {\n    store\n  } >\n  <\n  App / >\n  <\n  /Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}